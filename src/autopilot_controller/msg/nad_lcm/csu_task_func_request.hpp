/** THIS IS AN AUTOMATICALLY GENERATED FILE.  DO NOT MODIFY
 * BY HAND!!
 *
 * Generated by lcm-gen
 **/

#include <lcm/lcm_coretypes.h>

#ifndef __nad_lcm_csu_task_func_request_hpp__
#define __nad_lcm_csu_task_func_request_hpp__

#include <string>
#include <vector>

namespace nad_lcm
{

/// csu_scene->csu其他进程：请求执行脚本函数
class csu_task_func_request
{
    public:
        std::string func_name;

        int16_t    num_of_para;

        std::vector< std::string > para;

    public:
        /**
         * Encode a message into binary form.
         *
         * @param buf The output buffer.
         * @param offset Encoding starts at thie byte offset into @p buf.
         * @param maxlen Maximum number of bytes to write.  This should generally be
         *  equal to getEncodedSize().
         * @return The number of bytes encoded, or <0 on error.
         */
        inline int encode(void *buf, int offset, int maxlen) const;

        /**
         * Check how many bytes are required to encode this message.
         */
        inline int getEncodedSize() const;

        /**
         * Decode a message from binary form into this instance.
         *
         * @param buf The buffer containing the encoded message.
         * @param offset The byte offset into @p buf where the encoded message starts.
         * @param maxlen The maximum number of bytes to reqad while decoding.
         * @return The number of bytes decoded, or <0 if an error occured.
         */
        inline int decode(const void *buf, int offset, int maxlen);

        /**
         * Retrieve the 64-bit fingerprint identifying the structure of the message.
         * Note that the fingerprint is the same for all instances of the same
         * message type, and is a fingerprint on the message type definition, not on
         * the message contents.
         */
        inline static int64_t getHash();

        /**
         * Returns "csu_task_func_request"
         */
        inline static const char* getTypeName();

        // LCM support functions. Users should not call these
        inline int _encodeNoHash(void *buf, int offset, int maxlen) const;
        inline int _getEncodedSizeNoHash() const;
        inline int _decodeNoHash(const void *buf, int offset, int maxlen);
        inline static int64_t _computeHash(const __lcm_hash_ptr *p);
};

int csu_task_func_request::encode(void *buf, int offset, int maxlen) const
{
    int pos = 0, tlen;
    int64_t hash = getHash();

    tlen = __int64_t_encode_array(buf, offset + pos, maxlen - pos, &hash, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = this->_encodeNoHash(buf, offset + pos, maxlen - pos);
    if (tlen < 0) return tlen; else pos += tlen;

    return pos;
}

int csu_task_func_request::decode(const void *buf, int offset, int maxlen)
{
    int pos = 0, thislen;

    int64_t msg_hash;
    thislen = __int64_t_decode_array(buf, offset + pos, maxlen - pos, &msg_hash, 1);
    if (thislen < 0) return thislen; else pos += thislen;
    if (msg_hash != getHash()) return -1;

    thislen = this->_decodeNoHash(buf, offset + pos, maxlen - pos);
    if (thislen < 0) return thislen; else pos += thislen;

    return pos;
}

int csu_task_func_request::getEncodedSize() const
{
    return 8 + _getEncodedSizeNoHash();
}

int64_t csu_task_func_request::getHash()
{
    static int64_t hash = _computeHash(NULL);
    return hash;
}

const char* csu_task_func_request::getTypeName()
{
    return "csu_task_func_request";
}

int csu_task_func_request::_encodeNoHash(void *buf, int offset, int maxlen) const
{
    int pos = 0, tlen;

    char* func_name_cstr = (char*) this->func_name.c_str();
    tlen = __string_encode_array(buf, offset + pos, maxlen - pos, &func_name_cstr, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int16_t_encode_array(buf, offset + pos, maxlen - pos, &this->num_of_para, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    for (int a0 = 0; a0 < this->num_of_para; a0++) {
        char* __cstr = (char*) this->para[a0].c_str();
        tlen = __string_encode_array(buf, offset + pos, maxlen - pos, &__cstr, 1);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    return pos;
}

int csu_task_func_request::_decodeNoHash(const void *buf, int offset, int maxlen)
{
    int pos = 0, tlen;

    int32_t __func_name_len__;
    tlen = __int32_t_decode_array(buf, offset + pos, maxlen - pos, &__func_name_len__, 1);
    if(tlen < 0) return tlen; else pos += tlen;
    if(__func_name_len__ > maxlen - pos) return -1;
    this->func_name.assign(((const char*)buf) + offset + pos, __func_name_len__ - 1);
    pos += __func_name_len__;

    tlen = __int16_t_decode_array(buf, offset + pos, maxlen - pos, &this->num_of_para, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    this->para.resize(this->num_of_para);
    for (int a0 = 0; a0 < this->num_of_para; a0++) {
        int32_t __elem_len;
        tlen = __int32_t_decode_array(buf, offset + pos, maxlen - pos, &__elem_len, 1);
        if(tlen < 0) return tlen; else pos += tlen;
        if(__elem_len > maxlen - pos) return -1;
        this->para[a0].assign(((const char*)buf) + offset + pos, __elem_len -  1);
        pos += __elem_len;
    }

    return pos;
}

int csu_task_func_request::_getEncodedSizeNoHash() const
{
    int enc_size = 0;
    enc_size += this->func_name.size() + 4 + 1;
    enc_size += __int16_t_encoded_array_size(NULL, 1);
    for (int a0 = 0; a0 < this->num_of_para; a0++) {
        enc_size += this->para[a0].size() + 4 + 1;
    }
    return enc_size;
}

int64_t csu_task_func_request::_computeHash(const __lcm_hash_ptr *)
{
    int64_t hash = 0xfd56f0597a4a5936LL;
    return (hash<<1) + ((hash>>63)&1);
}

}

#endif
