/** THIS IS AN AUTOMATICALLY GENERATED FILE.  DO NOT MODIFY
 * BY HAND!!
 *
 * Generated by lcm-gen
 **/

#include <lcm/lcm_coretypes.h>

#ifndef __nad_lcm_ro_route_respond_hpp__
#define __nad_lcm_ro_route_respond_hpp__

#include <string>
#include "route_planning.hpp"

namespace nad_lcm
{

/// rsu->obu：返回路径规划结果
class ro_route_respond
{
    public:
        std::string obu_name;

        int32_t    retcode;

        nad_lcm::route_planning route;

    public:
        /**
         * Encode a message into binary form.
         *
         * @param buf The output buffer.
         * @param offset Encoding starts at thie byte offset into @p buf.
         * @param maxlen Maximum number of bytes to write.  This should generally be
         *  equal to getEncodedSize().
         * @return The number of bytes encoded, or <0 on error.
         */
        inline int encode(void *buf, int offset, int maxlen) const;

        /**
         * Check how many bytes are required to encode this message.
         */
        inline int getEncodedSize() const;

        /**
         * Decode a message from binary form into this instance.
         *
         * @param buf The buffer containing the encoded message.
         * @param offset The byte offset into @p buf where the encoded message starts.
         * @param maxlen The maximum number of bytes to reqad while decoding.
         * @return The number of bytes decoded, or <0 if an error occured.
         */
        inline int decode(const void *buf, int offset, int maxlen);

        /**
         * Retrieve the 64-bit fingerprint identifying the structure of the message.
         * Note that the fingerprint is the same for all instances of the same
         * message type, and is a fingerprint on the message type definition, not on
         * the message contents.
         */
        inline static int64_t getHash();

        /**
         * Returns "ro_route_respond"
         */
        inline static const char* getTypeName();

        // LCM support functions. Users should not call these
        inline int _encodeNoHash(void *buf, int offset, int maxlen) const;
        inline int _getEncodedSizeNoHash() const;
        inline int _decodeNoHash(const void *buf, int offset, int maxlen);
        inline static int64_t _computeHash(const __lcm_hash_ptr *p);
};

int ro_route_respond::encode(void *buf, int offset, int maxlen) const
{
    int pos = 0, tlen;
    int64_t hash = getHash();

    tlen = __int64_t_encode_array(buf, offset + pos, maxlen - pos, &hash, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = this->_encodeNoHash(buf, offset + pos, maxlen - pos);
    if (tlen < 0) return tlen; else pos += tlen;

    return pos;
}

int ro_route_respond::decode(const void *buf, int offset, int maxlen)
{
    int pos = 0, thislen;

    int64_t msg_hash;
    thislen = __int64_t_decode_array(buf, offset + pos, maxlen - pos, &msg_hash, 1);
    if (thislen < 0) return thislen; else pos += thislen;
    if (msg_hash != getHash()) return -1;

    thislen = this->_decodeNoHash(buf, offset + pos, maxlen - pos);
    if (thislen < 0) return thislen; else pos += thislen;

    return pos;
}

int ro_route_respond::getEncodedSize() const
{
    return 8 + _getEncodedSizeNoHash();
}

int64_t ro_route_respond::getHash()
{
    static int64_t hash = _computeHash(NULL);
    return hash;
}

const char* ro_route_respond::getTypeName()
{
    return "ro_route_respond";
}

int ro_route_respond::_encodeNoHash(void *buf, int offset, int maxlen) const
{
    int pos = 0, tlen;

    char* obu_name_cstr = (char*) this->obu_name.c_str();
    tlen = __string_encode_array(buf, offset + pos, maxlen - pos, &obu_name_cstr, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int32_t_encode_array(buf, offset + pos, maxlen - pos, &this->retcode, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = this->route._encodeNoHash(buf, offset + pos, maxlen - pos);
    if(tlen < 0) return tlen; else pos += tlen;

    return pos;
}

int ro_route_respond::_decodeNoHash(const void *buf, int offset, int maxlen)
{
    int pos = 0, tlen;

    int32_t __obu_name_len__;
    tlen = __int32_t_decode_array(buf, offset + pos, maxlen - pos, &__obu_name_len__, 1);
    if(tlen < 0) return tlen; else pos += tlen;
    if(__obu_name_len__ > maxlen - pos) return -1;
    this->obu_name.assign(((const char*)buf) + offset + pos, __obu_name_len__ - 1);
    pos += __obu_name_len__;

    tlen = __int32_t_decode_array(buf, offset + pos, maxlen - pos, &this->retcode, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = this->route._decodeNoHash(buf, offset + pos, maxlen - pos);
    if(tlen < 0) return tlen; else pos += tlen;

    return pos;
}

int ro_route_respond::_getEncodedSizeNoHash() const
{
    int enc_size = 0;
    enc_size += this->obu_name.size() + 4 + 1;
    enc_size += __int32_t_encoded_array_size(NULL, 1);
    enc_size += this->route._getEncodedSizeNoHash();
    return enc_size;
}

int64_t ro_route_respond::_computeHash(const __lcm_hash_ptr *p)
{
    const __lcm_hash_ptr *fp;
    for(fp = p; fp != NULL; fp = fp->parent)
        if(fp->v == ro_route_respond::getHash)
            return 0;
    const __lcm_hash_ptr cp = { p, (void*)ro_route_respond::getHash };

    int64_t hash = 0x50291f88b3890b2aLL +
         nad_lcm::route_planning::_computeHash(&cp);

    return (hash<<1) + ((hash>>63)&1);
}

}

#endif
