/** THIS IS AN AUTOMATICALLY GENERATED FILE.  DO NOT MODIFY
 * BY HAND!!
 *
 * Generated by lcm-gen
 **/

#include <lcm/lcm_coretypes.h>

#ifndef __obu_lcm_point_t_hpp__
#define __obu_lcm_point_t_hpp__


namespace obu_lcm
{

/**
 * struct nav_points {
 * double gps_time;                 //gps时间
 * int32_t week;                    //星期，周日=0，周一=1，……，周六=6
 * double p_x;                      //局部坐标系坐标
 * double p_y;                      //局部坐标系坐标
 * double p_z;                      //局部坐标系坐标
 * double lat;                      //经度
 * double lon;                      //纬度
 * double height;                   //高程
 * double lateral_speed;            //横向速度，单位：m/s
 * double longitudinal_speed;       //纵向速度，单位：m/s
 * double down_speed;               //地向速度，单位：m/s
 * double roll;                     //横滚角度，单位：度
 * double pitch;                    //俯仰角度，单位：度
 * double heading;                  //航向角度，单位：度
 * double lateral_accelerate;       //横向加速度，单位：m/s2
 * double longitudinal_accelerate;  //纵向加速度，单位：m/s2
 * double down_accelerate;          //地向加速度，单位：m/s2
 * double roll_speed;               //横滚角速度，单位：度/s
 * double pitch_speed;              //俯仰角速度，单位：度/s
 * double heading_speed;            //航向角速度，单位：度/s
 * double steering_angle;           //方向盘角度，单位：度
 * double steering_angle_speed;     //方向盘角速度，单位：度/s
 * double speed_desired_Uxs;        //期望纵向速度，单位：m/s
 * double acceleration_desired_Axs; //期望纵向加速度，单位：m/s2
 * double lateral_offset;           //横向偏移，单位：m
 * double k_s;                      //曲率，单位：m^-1
 * double s;                        //相对起点的里程值
 * int32_t point_no;                //参考轨迹的对应点
 * }
 * //导航精确控制点的序列
 * struct nav_control_points {
 * int64_t utime;                    //规划时间
 * int32_t num_of_points;            //导航控制点数量，自身→前方
 * nav_points points[num_of_points]; //导航控制点序列
 * }
 * -------------------------------------------------------------------
 * 激光雷达和毫米波雷达，obu_lidar/obu_radar.exe进程发布，obu和vui可读，发布频率=10Hz
 * -------------------------------------------------------------------
 * 点
 */
class point_t
{
    public:
        float      x;

        float      y;

        float      z;

    public:
        /**
         * Encode a message into binary form.
         *
         * @param buf The output buffer.
         * @param offset Encoding starts at thie byte offset into @p buf.
         * @param maxlen Maximum number of bytes to write.  This should generally be
         *  equal to getEncodedSize().
         * @return The number of bytes encoded, or <0 on error.
         */
        inline int encode(void *buf, int offset, int maxlen) const;

        /**
         * Check how many bytes are required to encode this message.
         */
        inline int getEncodedSize() const;

        /**
         * Decode a message from binary form into this instance.
         *
         * @param buf The buffer containing the encoded message.
         * @param offset The byte offset into @p buf where the encoded message starts.
         * @param maxlen The maximum number of bytes to reqad while decoding.
         * @return The number of bytes decoded, or <0 if an error occured.
         */
        inline int decode(const void *buf, int offset, int maxlen);

        /**
         * Retrieve the 64-bit fingerprint identifying the structure of the message.
         * Note that the fingerprint is the same for all instances of the same
         * message type, and is a fingerprint on the message type definition, not on
         * the message contents.
         */
        inline static int64_t getHash();

        /**
         * Returns "point_t"
         */
        inline static const char* getTypeName();

        // LCM support functions. Users should not call these
        inline int _encodeNoHash(void *buf, int offset, int maxlen) const;
        inline int _getEncodedSizeNoHash() const;
        inline int _decodeNoHash(const void *buf, int offset, int maxlen);
        inline static uint64_t _computeHash(const __lcm_hash_ptr *p);
};

int point_t::encode(void *buf, int offset, int maxlen) const
{
    int pos = 0, tlen;
    int64_t hash = (int64_t)getHash();

    tlen = __int64_t_encode_array(buf, offset + pos, maxlen - pos, &hash, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = this->_encodeNoHash(buf, offset + pos, maxlen - pos);
    if (tlen < 0) return tlen; else pos += tlen;

    return pos;
}

int point_t::decode(const void *buf, int offset, int maxlen)
{
    int pos = 0, thislen;

    int64_t msg_hash;
    thislen = __int64_t_decode_array(buf, offset + pos, maxlen - pos, &msg_hash, 1);
    if (thislen < 0) return thislen; else pos += thislen;
    if (msg_hash != getHash()) return -1;

    thislen = this->_decodeNoHash(buf, offset + pos, maxlen - pos);
    if (thislen < 0) return thislen; else pos += thislen;

    return pos;
}

int point_t::getEncodedSize() const
{
    return 8 + _getEncodedSizeNoHash();
}

int64_t point_t::getHash()
{
    static int64_t hash = _computeHash(NULL);
    return hash;
}

const char* point_t::getTypeName()
{
    return "point_t";
}

int point_t::_encodeNoHash(void *buf, int offset, int maxlen) const
{
    int pos = 0, tlen;

    tlen = __float_encode_array(buf, offset + pos, maxlen - pos, &this->x, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __float_encode_array(buf, offset + pos, maxlen - pos, &this->y, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __float_encode_array(buf, offset + pos, maxlen - pos, &this->z, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    return pos;
}

int point_t::_decodeNoHash(const void *buf, int offset, int maxlen)
{
    int pos = 0, tlen;

    tlen = __float_decode_array(buf, offset + pos, maxlen - pos, &this->x, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __float_decode_array(buf, offset + pos, maxlen - pos, &this->y, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __float_decode_array(buf, offset + pos, maxlen - pos, &this->z, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    return pos;
}

int point_t::_getEncodedSizeNoHash() const
{
    int enc_size = 0;
    enc_size += __float_encoded_array_size(NULL, 1);
    enc_size += __float_encoded_array_size(NULL, 1);
    enc_size += __float_encoded_array_size(NULL, 1);
    return enc_size;
}

uint64_t point_t::_computeHash(const __lcm_hash_ptr *)
{
    uint64_t hash = 0x2a14f112c253ac0cLL;
    return (hash<<1) + ((hash>>63)&1);
}

}

#endif
