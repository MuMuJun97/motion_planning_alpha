/** THIS IS AN AUTOMATICALLY GENERATED FILE.  DO NOT MODIFY
 * BY HAND!!
 *
 * Generated by lcm-gen
 **/

#include <lcm/lcm_coretypes.h>

#ifndef __nad_lcm_header_t_hpp__
#define __nad_lcm_header_t_hpp__

#include <string>

namespace nad_lcm
{

class header_t
{
    public:
        int8_t     version;

        std::string peer_ne_name;

        std::string peer_channel;

        std::string local_ne_name;

        std::string local_channel;

        std::string session_name;

        int32_t    type;

        int64_t    time;

        int64_t    opt;

    public:
        /**
         * Encode a message into binary form.
         *
         * @param buf The output buffer.
         * @param offset Encoding starts at thie byte offset into @p buf.
         * @param maxlen Maximum number of bytes to write.  This should generally be
         *  equal to getEncodedSize().
         * @return The number of bytes encoded, or <0 on error.
         */
        inline int encode(void *buf, int offset, int maxlen) const;

        /**
         * Check how many bytes are required to encode this message.
         */
        inline int getEncodedSize() const;

        /**
         * Decode a message from binary form into this instance.
         *
         * @param buf The buffer containing the encoded message.
         * @param offset The byte offset into @p buf where the encoded message starts.
         * @param maxlen The maximum number of bytes to reqad while decoding.
         * @return The number of bytes decoded, or <0 if an error occured.
         */
        inline int decode(const void *buf, int offset, int maxlen);

        /**
         * Retrieve the 64-bit fingerprint identifying the structure of the message.
         * Note that the fingerprint is the same for all instances of the same
         * message type, and is a fingerprint on the message type definition, not on
         * the message contents.
         */
        inline static int64_t getHash();

        /**
         * Returns "header_t"
         */
        inline static const char* getTypeName();

        // LCM support functions. Users should not call these
        inline int _encodeNoHash(void *buf, int offset, int maxlen) const;
        inline int _getEncodedSizeNoHash() const;
        inline int _decodeNoHash(const void *buf, int offset, int maxlen);
        inline static int64_t _computeHash(const __lcm_hash_ptr *p);
};

int header_t::encode(void *buf, int offset, int maxlen) const
{
    int pos = 0, tlen;
    int64_t hash = getHash();

    tlen = __int64_t_encode_array(buf, offset + pos, maxlen - pos, &hash, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = this->_encodeNoHash(buf, offset + pos, maxlen - pos);
    if (tlen < 0) return tlen; else pos += tlen;

    return pos;
}

int header_t::decode(const void *buf, int offset, int maxlen)
{
    int pos = 0, thislen;

    int64_t msg_hash;
    thislen = __int64_t_decode_array(buf, offset + pos, maxlen - pos, &msg_hash, 1);
    if (thislen < 0) return thislen; else pos += thislen;
    if (msg_hash != getHash()) return -1;

    thislen = this->_decodeNoHash(buf, offset + pos, maxlen - pos);
    if (thislen < 0) return thislen; else pos += thislen;

    return pos;
}

int header_t::getEncodedSize() const
{
    return 8 + _getEncodedSizeNoHash();
}

int64_t header_t::getHash()
{
    static int64_t hash = _computeHash(NULL);
    return hash;
}

const char* header_t::getTypeName()
{
    return "header_t";
}

int header_t::_encodeNoHash(void *buf, int offset, int maxlen) const
{
    int pos = 0, tlen;

    tlen = __int8_t_encode_array(buf, offset + pos, maxlen - pos, &this->version, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    char* peer_ne_name_cstr = (char*) this->peer_ne_name.c_str();
    tlen = __string_encode_array(buf, offset + pos, maxlen - pos, &peer_ne_name_cstr, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    char* peer_channel_cstr = (char*) this->peer_channel.c_str();
    tlen = __string_encode_array(buf, offset + pos, maxlen - pos, &peer_channel_cstr, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    char* local_ne_name_cstr = (char*) this->local_ne_name.c_str();
    tlen = __string_encode_array(buf, offset + pos, maxlen - pos, &local_ne_name_cstr, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    char* local_channel_cstr = (char*) this->local_channel.c_str();
    tlen = __string_encode_array(buf, offset + pos, maxlen - pos, &local_channel_cstr, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    char* session_name_cstr = (char*) this->session_name.c_str();
    tlen = __string_encode_array(buf, offset + pos, maxlen - pos, &session_name_cstr, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int32_t_encode_array(buf, offset + pos, maxlen - pos, &this->type, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int64_t_encode_array(buf, offset + pos, maxlen - pos, &this->time, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int64_t_encode_array(buf, offset + pos, maxlen - pos, &this->opt, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    return pos;
}

int header_t::_decodeNoHash(const void *buf, int offset, int maxlen)
{
    int pos = 0, tlen;

    tlen = __int8_t_decode_array(buf, offset + pos, maxlen - pos, &this->version, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    int32_t __peer_ne_name_len__;
    tlen = __int32_t_decode_array(buf, offset + pos, maxlen - pos, &__peer_ne_name_len__, 1);
    if(tlen < 0) return tlen; else pos += tlen;
    if(__peer_ne_name_len__ > maxlen - pos) return -1;
    this->peer_ne_name.assign(((const char*)buf) + offset + pos, __peer_ne_name_len__ - 1);
    pos += __peer_ne_name_len__;

    int32_t __peer_channel_len__;
    tlen = __int32_t_decode_array(buf, offset + pos, maxlen - pos, &__peer_channel_len__, 1);
    if(tlen < 0) return tlen; else pos += tlen;
    if(__peer_channel_len__ > maxlen - pos) return -1;
    this->peer_channel.assign(((const char*)buf) + offset + pos, __peer_channel_len__ - 1);
    pos += __peer_channel_len__;

    int32_t __local_ne_name_len__;
    tlen = __int32_t_decode_array(buf, offset + pos, maxlen - pos, &__local_ne_name_len__, 1);
    if(tlen < 0) return tlen; else pos += tlen;
    if(__local_ne_name_len__ > maxlen - pos) return -1;
    this->local_ne_name.assign(((const char*)buf) + offset + pos, __local_ne_name_len__ - 1);
    pos += __local_ne_name_len__;

    int32_t __local_channel_len__;
    tlen = __int32_t_decode_array(buf, offset + pos, maxlen - pos, &__local_channel_len__, 1);
    if(tlen < 0) return tlen; else pos += tlen;
    if(__local_channel_len__ > maxlen - pos) return -1;
    this->local_channel.assign(((const char*)buf) + offset + pos, __local_channel_len__ - 1);
    pos += __local_channel_len__;

    int32_t __session_name_len__;
    tlen = __int32_t_decode_array(buf, offset + pos, maxlen - pos, &__session_name_len__, 1);
    if(tlen < 0) return tlen; else pos += tlen;
    if(__session_name_len__ > maxlen - pos) return -1;
    this->session_name.assign(((const char*)buf) + offset + pos, __session_name_len__ - 1);
    pos += __session_name_len__;

    tlen = __int32_t_decode_array(buf, offset + pos, maxlen - pos, &this->type, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int64_t_decode_array(buf, offset + pos, maxlen - pos, &this->time, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int64_t_decode_array(buf, offset + pos, maxlen - pos, &this->opt, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    return pos;
}

int header_t::_getEncodedSizeNoHash() const
{
    int enc_size = 0;
    enc_size += __int8_t_encoded_array_size(NULL, 1);
    enc_size += this->peer_ne_name.size() + 4 + 1;
    enc_size += this->peer_channel.size() + 4 + 1;
    enc_size += this->local_ne_name.size() + 4 + 1;
    enc_size += this->local_channel.size() + 4 + 1;
    enc_size += this->session_name.size() + 4 + 1;
    enc_size += __int32_t_encoded_array_size(NULL, 1);
    enc_size += __int64_t_encoded_array_size(NULL, 1);
    enc_size += __int64_t_encoded_array_size(NULL, 1);
    return enc_size;
}

int64_t header_t::_computeHash(const __lcm_hash_ptr *)
{
    int64_t hash = 0xe13af6c885184365LL;
    return (hash<<1) + ((hash>>63)&1);
}

}

#endif
